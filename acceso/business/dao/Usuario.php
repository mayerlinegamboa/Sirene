<?php


 /**
  * Usuario Value Object.
  * This class is value object representing database table tblusuario
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */




class Usuario {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    var $secusuario;
    var $secpersona;
    var $secrol;
    var $login;
    var $password;
    var $sesion;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    function Usuario () {

    }

    /* function Usuario ($secusuarioIn) {

          $this->secusuario = $secusuarioIn;

    } */


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    function getSecusuario() {
          return $this->secusuario;
    }
    function setSecusuario($secusuarioIn) {
          $this->secusuario = $secusuarioIn;
    }

    function getSecpersona() {
          return $this->secpersona;
    }
    function setSecpersona($secpersonaIn) {
          $this->secpersona = $secpersonaIn;
    }

    function getSecrol() {
          return $this->secrol;
    }
    function setSecrol($secrolIn) {
          $this->secrol = $secrolIn;
    }

    function getLogin() {
          return $this->login;
    }
    function setLogin($loginIn) {
          $this->login = $loginIn;
    }

    function getPassword() {
          return $this->password;
    }
    function setPassword($passwordIn) {
          $this->password = $passwordIn;
    }

    function getSesion() {
          return $this->sesion;
    }
    function setSesion($sesionIn) {
          $this->sesion = $sesionIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    function setAll($secusuarioIn,
          $secpersonaIn,
          $secrolIn,
          $loginIn,
          $passwordIn,
          $sesionIn) {
          $this->secusuario = $secusuarioIn;
          $this->secpersona = $secpersonaIn;
          $this->secrol = $secrolIn;
          $this->login = $loginIn;
          $this->password = $passwordIn;
          $this->sesion = $sesionIn;
    }


    /** 
     * hasEqualMapping-method will compare two Usuario instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    function hasEqualMapping($valueObject) {

          if ($valueObject->getSecusuario() != $this->secusuario) {
                    return(false);
          }
          if ($valueObject->getSecpersona() != $this->secpersona) {
                    return(false);
          }
          if ($valueObject->getSecrol() != $this->secrol) {
                    return(false);
          }
          if ($valueObject->getLogin() != $this->login) {
                    return(false);
          }
          if ($valueObject->getPassword() != $this->password) {
                    return(false);
          }
          if ($valueObject->getSesion() != $this->sesion) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    function toString() {
        $out = $this->getDaogenVersion();
        $out = $out."\nclass Usuario, mapping to table tblusuario\n";
        $out = $out."Persistent attributes: \n"; 
        $out = $out."secusuario = ".$this->secusuario."\n"; 
        $out = $out."secpersona = ".$this->secpersona."\n"; 
        $out = $out."secrol = ".$this->secrol."\n"; 
        $out = $out."login = ".$this->login."\n"; 
        $out = $out."password = ".$this->password."\n"; 
        $out = $out."sesion = ".$this->sesion."\n"; 
        return $out;
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    function clonar() {
        $cloned = new Usuario();

        $cloned->setSecusuario($this->secusuario); 
        $cloned->setSecpersona($this->secpersona); 
        $cloned->setSecrol($this->secrol); 
        $cloned->setLogin($this->login); 
        $cloned->setPassword($this->password); 
        $cloned->setSesion($this->sesion); 

        return $cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    function getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

?>
