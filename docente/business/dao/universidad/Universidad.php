<?php


 /**
  * Universidad Value Object.
  * This class is value object representing database table tbluniversidad
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */




class Universidad {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    var $secuniversidad;
    var $descripcion;
    var $telefono;
    var $movil;
    var $direccion;
    var $nit;
    var $sitioweb;
    var $secciudad;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    function Universidad () {

    }

    /* function Universidad ($secuniversidadIn) {

          $this->secuniversidad = $secuniversidadIn;

    } */


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    function getSecuniversidad() {
          return $this->secuniversidad;
    }
    function setSecuniversidad($secuniversidadIn) {
          $this->secuniversidad = $secuniversidadIn;
    }

    function getDescripcion() {
          return $this->descripcion;
    }
    function setDescripcion($descripcionIn) {
          $this->descripcion = $descripcionIn;
    }

    function getTelefono() {
          return $this->telefono;
    }
    function setTelefono($telefonoIn) {
          $this->telefono = $telefonoIn;
    }

    function getMovil() {
          return $this->movil;
    }
    function setMovil($movilIn) {
          $this->movil = $movilIn;
    }

    function getDireccion() {
          return $this->direccion;
    }
    function setDireccion($direccionIn) {
          $this->direccion = $direccionIn;
    }

    function getNit() {
          return $this->nit;
    }
    function setNit($nitIn) {
          $this->nit = $nitIn;
    }

    function getSitioweb() {
          return $this->sitioweb;
    }
    function setSitioweb($sitiowebIn) {
          $this->sitioweb = $sitiowebIn;
    }

    function getSecciudad() {
          return $this->secciudad;
    }
    function setSecciudad($secciudadIn) {
          $this->secciudad = $secciudadIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    function setAll($secuniversidadIn,
          $descripcionIn,
          $telefonoIn,
          $movilIn,
          $direccionIn,
          $nitIn,
          $sitiowebIn,
          $secciudadIn) {
          $this->secuniversidad = $secuniversidadIn;
          $this->descripcion = $descripcionIn;
          $this->telefono = $telefonoIn;
          $this->movil = $movilIn;
          $this->direccion = $direccionIn;
          $this->nit = $nitIn;
          $this->sitioweb = $sitiowebIn;
          $this->secciudad = $secciudadIn;
    }


    /** 
     * hasEqualMapping-method will compare two Universidad instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    function hasEqualMapping($valueObject) {

          if ($valueObject->getSecuniversidad() != $this->secuniversidad) {
                    return(false);
          }
          if ($valueObject->getDescripcion() != $this->descripcion) {
                    return(false);
          }
          if ($valueObject->getTelefono() != $this->telefono) {
                    return(false);
          }
          if ($valueObject->getMovil() != $this->movil) {
                    return(false);
          }
          if ($valueObject->getDireccion() != $this->direccion) {
                    return(false);
          }
          if ($valueObject->getNit() != $this->nit) {
                    return(false);
          }
          if ($valueObject->getSitioweb() != $this->sitioweb) {
                    return(false);
          }
          if ($valueObject->getSecciudad() != $this->secciudad) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    function toString() {
        $out = $this->getDaogenVersion();
        $out = $out."\nclass Universidad, mapping to table tbluniversidad\n";
        $out = $out."Persistent attributes: \n"; 
        $out = $out."secuniversidad = ".$this->secuniversidad."\n"; 
        $out = $out."descripcion = ".$this->descripcion."\n"; 
        $out = $out."telefono = ".$this->telefono."\n"; 
        $out = $out."movil = ".$this->movil."\n"; 
        $out = $out."direccion = ".$this->direccion."\n"; 
        $out = $out."nit = ".$this->nit."\n"; 
        $out = $out."sitioweb = ".$this->sitioweb."\n"; 
        $out = $out."secciudad = ".$this->secciudad."\n"; 
        return $out;
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    function clonar() {
        $cloned = new Universidad();

        $cloned->setSecuniversidad($this->secuniversidad); 
        $cloned->setDescripcion($this->descripcion); 
        $cloned->setTelefono($this->telefono); 
        $cloned->setMovil($this->movil); 
        $cloned->setDireccion($this->direccion); 
        $cloned->setNit($this->nit); 
        $cloned->setSitioweb($this->sitioweb); 
        $cloned->setSecciudad($this->secciudad); 

        return $cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    function getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

?>
